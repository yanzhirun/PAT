class Solution {
    public:
        vector<vector<int>> fourSum(vector<int>& nums, int target) {
            if (nums.size() < 4)
                return vector<vector<int> >();
            sort(nums.begin(), nums.end());

            map<int, vector<pair<int, int> > > cache;
            for (size_t a = 0; a < nums.size(); ++a)
            {
                for (size_t b = 0; b < nums.size(); ++b)
                {
                    cache[nums[a] + nums[b]].push_back(pair<int, int>(a, b));
                }
            }
            set<vector<int> > result;
            for(size_t c = 2; c < nums.size(); ++c)
            {
                for(size_t d = c + 1; d < nums.size(); ++d)
                {
                    const int key = target - nums[c] - nums[d];
                    if (cache.find(key) != cache.end())
                    {
                        for(size_t k = 0; k < cache[key].size(); ++k)
                        {
                            if (c <= cache[key][k].second)
                                continue;
                            result.insert(vector<int> {nums[cache[key][k].first], nums[cache[key][k].second], nums[c], nums[d]});
                        }
                    }
                }
            }
            return vector<vector<int> > (result.begin(), result.end());
        }

};
